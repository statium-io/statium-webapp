{"version":3,"sources":["utils/hooks.ts","components/_styled.ts","components/DayCalendar.tsx","utils/football-data-api-client.ts","Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useAsync","initialState","initialStateRef","React","status","data","error","s","a","current","safeSetState","dispatch","mounted","args","useSafeDispatch","setData","setError","reset","run","promise","then","Error","Promise","reject","isIdle","isLoading","isError","isSuccess","MainContent","styled","div","StyledTable","table","StyledTableHeader","thead","StyledTableBody","tbody","DayCalendar","endpoint","customConfig","authToken","process","undefined","config","method","headers","window","fetch","response","json","client","message","day","month","value","filters","dateFrom","year","matches","filter","match","competition","area","code","name","map","utcDate","homeTeam","awayTeam","score","fullTime","CustomHeader","header","CustomNav","nav","HeaderLink","Header","href","messagesInFrench","myMessage","App","defaultLocale","locale","messages","reportWebVitals","onPerfEntry","Function","getCLS","getFCP","getFID","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97160943.chunk.js","sourcesContent":["import * as React from 'react';\n\nfunction useSafeDispatch<A>(dispatch: React.Dispatch<A>) {\n  const mounted = React.useRef(false);\n  React.useLayoutEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  return React.useCallback((args) => (mounted.current ? dispatch(args) : void 0), [dispatch]);\n}\n\n// Example usage:\n// const {data, error, status, run} = useAsync()\n// React.useEffect(() => {\n//   run(fetchPokemon(pokemonName))\n// }, [pokemonName, run])\n\nexport type AsyncLoadingState<DataType> = {\n  status: 'idle' | 'pending' | 'rejected' | 'resolved';\n  data: DataType | null;\n  error: Error | null;\n};\n\nfunction defaultInitialState<DataType>(): AsyncLoadingState<DataType> {\n  return { status: 'idle', data: null, error: null };\n}\n\ntype AsyncLoadingResult<DataType> = {\n  isIdle: boolean;\n  isLoading: boolean;\n  isError: boolean;\n  isSuccess: boolean;\n  setData: (data: DataType) => void;\n  setError: (error: Error) => void;\n  error: Error | null;\n  status: 'idle' | 'pending' | 'rejected' | 'resolved';\n  data: DataType | null;\n  run: (promise: Promise<DataType>) => Promise<DataType>;\n  reset: () => void;\n};\n\nfunction useAsync<T>(initialState: Partial<AsyncLoadingState<T>>): AsyncLoadingResult<T> {\n  const initialStateRef: React.MutableRefObject<AsyncLoadingState<T>> = React.useRef({\n    ...defaultInitialState(),\n    ...initialState,\n  });\n  const [{ data, error, status }, setState] = React.useReducer(\n    (s: AsyncLoadingState<T>, a: AsyncLoadingState<T>) => ({ ...s, ...a }),\n    initialStateRef.current\n  );\n\n  const safeSetState = useSafeDispatch(setState);\n\n  const setData = React.useCallback((data) => safeSetState({ data, status: 'resolved' }), [\n    safeSetState,\n  ]);\n  const setError = React.useCallback((error) => safeSetState({ error, status: 'rejected' }), [\n    safeSetState,\n  ]);\n  const reset = React.useCallback(() => {\n    safeSetState(initialStateRef.current);\n  }, [safeSetState]);\n\n  const run = React.useCallback(\n    (promise: Promise<T>) => {\n      if (!promise || !promise.then) {\n        throw new Error(\n          `The argument passed to useAsync().run must be a promise. Maybe a function that's passed isn't returning anything?`\n        );\n      }\n      safeSetState({ status: 'pending' });\n      return promise.then(\n        (data) => {\n          setData(data);\n          return data;\n        },\n        (error) => {\n          setError(error);\n          return Promise.reject(error);\n        }\n      );\n    },\n    [safeSetState, setData, setError]\n  );\n\n  return {\n    // using the same names that react-query uses for convenience\n    isIdle: status === 'idle',\n    isLoading: status === 'pending',\n    isError: status === 'rejected',\n    isSuccess: status === 'resolved',\n\n    setData,\n    setError,\n    error,\n    status,\n    data,\n    run,\n    reset,\n  };\n}\n\nexport { useAsync };\n","import styled from 'styled-components';\n\nexport const MainContent = styled.div`\n  margin: 0 auto;\n  padding: 0 1rem;\n  max-width: min(100ch, 100%);\n`;\n\nexport const StyledTable = styled.table`\n  border-radius: 0.5rem;\n  border: thin solid #eee;\n  width: 100%;\n`;\n\nexport const StyledTableHeader = styled.thead`\n  margin: 2rem;\n\n  & > tr {\n    & > th {\n      padding: 1rem;\n      text-align: left;\n      border-bottom: thin solid #eee;\n    }\n  }\n`;\n\nexport const StyledTableBody = styled.tbody`\n  margin: 2rem;\n\n  & > tr {\n    & > td {\n      padding: 1rem;\n      text-align: left;\n      border-bottom: thin solid #eee;\n    }\n  }\n`;\n","import * as React from 'react';\nimport { FormattedDate, FormattedTime } from 'react-intl';\n\nimport { client } from 'utils/football-data-api-client';\nimport { AsyncLoadingState, useAsync } from 'utils/hooks';\n\nimport { MainContent, StyledTable, StyledTableBody, StyledTableHeader } from './_styled';\nimport { Games } from './types';\n\nconst DayCalendar: React.FunctionComponent = () => {\n  const initialState: Partial<AsyncLoadingState<Games>> = {};\n  const { data, error, isError, isLoading, isSuccess, run } = useAsync(initialState);\n\n  React.useEffect(() => {\n    run(client('matches'));\n  }, [run]);\n\n  return (\n    <MainContent>\n      {isLoading ? <div>Loading...</div> : null}\n\n      {isError ? (\n        <div>\n          <p>There was an error:</p>\n          <pre>{error?.message}</pre>\n        </div>\n      ) : null}\n\n      {isSuccess && data !== null ? (\n        <>\n          <h1>\n            <FormattedDate\n              day=\"numeric\"\n              month=\"long\"\n              value={data?.filters.dateFrom}\n              year=\"numeric\"\n            />\n          </h1>\n          <StyledTable>\n            <StyledTableHeader>\n              <tr>\n                <th>Competition</th>\n                <th>Time</th>\n                <th>Home Team</th>\n                <th>Away Team</th>\n                <th>Status</th>\n                <th>Score</th>\n              </tr>\n            </StyledTableHeader>\n            <StyledTableBody>\n              {data.matches\n                .filter((match: { competition: { area: { code: string }; name: string } }) => {\n                  if (match.competition.area.code === 'BRA') {\n                    return false;\n                  }\n\n                  if (match.competition.area.code === 'PRT') {\n                    return false;\n                  }\n\n                  if (\n                    match.competition.area.code === 'ENG' &&\n                    match.competition.name === 'Championship'\n                  ) {\n                    return false;\n                  }\n\n                  return true;\n                })\n                .map((match) => (\n                  <tr>\n                    <td>\n                      {match.competition.name} ({match.competition.area.code})\n                    </td>\n                    <td>\n                      <FormattedTime value={match.utcDate} />\n                    </td>\n                    <td>{match.homeTeam.name}</td>\n                    <td>{match.awayTeam.name}</td>\n                    <td>{match.status}</td>\n                    <td>\n                      {match.score.fullTime.homeTeam} - {match.score.fullTime.awayTeam}\n                    </td>\n                  </tr>\n                ))}\n            </StyledTableBody>\n          </StyledTable>\n          <pre></pre>\n        </>\n      ) : null}\n    </MainContent>\n  );\n};\n\nexport { DayCalendar };\n","function client<T>(endpoint: string, customConfig: RequestInit = {}): Promise<T> {\n  const authToken = process.env.REACT_APP_FOOTBALL_DATA_API_AUTH_TOKEN;\n\n  if (authToken === undefined) {\n    throw Error(`Please set a $REACT_APP_FOOTBALL_DATA_API_AUTH_TOKEN environment varialbe`);\n  }\n\n  const config: RequestInit = {\n    method: 'GET',\n    headers: {\n      'X-Auth-Token': authToken,\n    },\n    ...customConfig,\n  };\n\n  return window\n    .fetch(`${process.env.REACT_APP_FOOTBALL_DATA_API_BASE_URL}/${endpoint}`, config)\n    .then((response) => response.json());\n}\n\nexport { client };\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst CustomHeader = styled.header`\n  border-bottom: solid 1px #ccc;\n`;\n\nconst CustomNav = styled.nav`\n  display: flex;\n  margin: 0 auto;\n  padding: 0 1rem;\n  max-width: min(100ch, 100%);\n`;\n\nconst HeaderLink = styled.a`\n  padding: 0.5rem;\n  line-height: 1.75rem;\n  display: inline-block;\n  font-size: 1rem;\n  font-weight: bold;\n  text-decoration: none;\n  color: inherit;\n`;\n\nconst Header = (): JSX.Element => {\n  return (\n    <CustomHeader>\n      <CustomNav>\n        <HeaderLink href=\"/\">Statium</HeaderLink>\n      </CustomNav>\n    </CustomHeader>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\n\nimport { DayCalendar } from './components/DayCalendar';\nimport Header from './Header';\n\nconst messagesInFrench = {\n  myMessage: \"Aujourd'hui, c'est le {ts, date, ::yyyyMMdd}\",\n};\n\ntype Props = Record<string, never>;\n\nconst App: React.FunctionComponent<Props> = () => {\n  return (\n    <IntlProvider defaultLocale=\"en\" locale=\"fr\" messages={messagesInFrench}>\n      <Header />\n      <DayCalendar />\n    </IntlProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFCP, getFID, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}